/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./Script.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Ball.ts":
/*!*****************!*\
  !*** ./Ball.ts ***!
  \*****************/
/*! exports provided: Ball, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ball\", function() { return Ball; });\n/* harmony import */ var _Script__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Script */ \"./Script.ts\");\n\r\nclass Ball {\r\n    constructor(x, y, gameMap, color) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.gameMap = gameMap;\r\n        this.color = color;\r\n        this.createBall();\r\n        this.selected = false;\r\n    }\r\n    createBall() {\r\n        this.ball = document.createElement(\"div\");\r\n        this.ball.style.top = 50 * this.y + \"px\";\r\n        this.ball.style.left = 50 * this.x + \"px\";\r\n        this.ball.style.backgroundColor = this.color;\r\n        this.ball.style.transition = \".1s\";\r\n        this.ball.classList.add(\"ball\");\r\n        this.ball.addEventListener(\"click\", () => {\r\n            if (!_Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ballSelected) {\r\n                _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ifBallSelected = true;\r\n                _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ballSelected = this;\r\n                _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].setProximity(_Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ballSelected.x, _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ballSelected.y);\r\n                document.getElementById(\"ifBallSelected\").innerHTML = \"A ball is selected, press Right Mouse Button to unselect\";\r\n            }\r\n        });\r\n        this.gameMap.appendChild(this.ball);\r\n    }\r\n    destroy() {\r\n        this.x = null;\r\n        this.y = null;\r\n        this.ball.classList.remove(\"ball\");\r\n        this.ball.classList.add(\"removedBall\");\r\n        this.selected = null;\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Ball);\r\n\n\n//# sourceURL=webpack:///./Ball.ts?");

/***/ }),

/***/ "./GameGrid.ts":
/*!*********************!*\
  !*** ./GameGrid.ts ***!
  \*********************/
/*! exports provided: GameGrid, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameGrid\", function() { return GameGrid; });\n/* harmony import */ var _Tile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tile */ \"./Tile.ts\");\n/* harmony import */ var _Ball__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Ball */ \"./Ball.ts\");\n/* harmony import */ var _decorators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./decorators */ \"./decorators.ts\");\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n\r\nclass GameGrid {\r\n    constructor(size, gameMap) {\r\n        this.size = size;\r\n        this.gameMap = document.getElementById(\"gameMap\");\r\n        this.tileTab = [];\r\n        this.ballTab = [];\r\n        this.savedStartTile = null;\r\n        this.savedEndTile = null;\r\n        this.allColors = ['#e0127d', '#e01212', '#6b6b6b', '#15bf0f', '#0036b5', '#00cccc', '#f9fc14'];\r\n        this.score = 0;\r\n        this.szyderca = false;\r\n    }\r\n    toggleSzyderca() {\r\n        this.szyderca = !this.szyderca;\r\n    }\r\n    createGrid() {\r\n        for (let x = 0; x < this.size; x++) {\r\n            this.tileTab.push([]);\r\n            for (let y = 0; y < this.size; y++) {\r\n                this.tileTab[x].push(new _Tile__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, y, this.gameMap));\r\n                this.tileTab[x][y].createTile();\r\n            }\r\n        }\r\n        for (let x = 0; x < this.size; x++) {\r\n            var arr = new Array(this.size);\r\n            this.ballTab.push(arr);\r\n        }\r\n    }\r\n    getColors(colorsNumber) {\r\n        let randomizedColors = [];\r\n        for (let i = 0; i < colorsNumber; i++) {\r\n            randomizedColors.push(this.allColors[Math.floor(Math.random() * this.allColors.length)]);\r\n        }\r\n        return randomizedColors;\r\n        // róż #e0127d \r\n        // czerw #e01212\r\n        // szary #6b6b6b\r\n        // ziel #15bf0f\r\n        // nieb #0036b5\r\n        // seled #00cccc\r\n        // żółty #f9fc14\r\n    }\r\n    generateBalls(colorsTab) {\r\n        for (let i = 0; i < colorsTab.length; i++) {\r\n            let x = Math.floor(Math.random() * this.size);\r\n            let y = Math.floor(Math.random() * this.size);\r\n            if (typeof this.ballTab[x][y] == \"undefined\" || this.ballTab[x][y] == null) {\r\n                let checkIfBoardFull = 0;\r\n                this.ballTab.forEach(el => {\r\n                    el.forEach(ele => {\r\n                        if (ele != undefined || ele != null) {\r\n                            checkIfBoardFull++;\r\n                        }\r\n                    });\r\n                });\r\n                if (checkIfBoardFull == (this.size * this.size) - 1) {\r\n                    alert(\"koniec Gry, zdobyte punkty : \" + this.score);\r\n                    window.location.reload();\r\n                    break;\r\n                }\r\n                this.tileTab[x].find(el => el.y == y).toggleBall();\r\n                this.ballTab[x][y] = new _Ball__WEBPACK_IMPORTED_MODULE_1__[\"default\"](x, y, this.gameMap, colorsTab[i]);\r\n                let ballsToDelete = this.checkPlace(x, y, this.ballTab[x][y]);\r\n                if (ballsToDelete.length > 0) {\r\n                    ballsToDelete.forEach(el => {\r\n                        if (el.x == null) {\r\n                        }\r\n                        else {\r\n                            this.tileTab[el.x][el.y].ballInside = false;\r\n                            this.ballTab[el.x][el.y] = null;\r\n                        }\r\n                        el.destroy();\r\n                        this.score++;\r\n                    });\r\n                    this.updateScore();\r\n                }\r\n            }\r\n            else {\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n    displayNextColors() {\r\n        GameGrid.colorsDisplay.style.width = this.nextColors.length * 50 + \"px\";\r\n        GameGrid.colorsDisplay.innerHTML = \"\";\r\n        for (let i = 0; i < this.nextColors.length; i++) {\r\n            let ball = document.createElement(\"div\");\r\n            ball.style.top = \"0px\";\r\n            ball.style.left = 50 * i + \"px\";\r\n            ball.style.backgroundColor = this.nextColors[i];\r\n            ball.classList.add(\"ball\");\r\n            GameGrid.colorsDisplay.appendChild(ball);\r\n        }\r\n    }\r\n    getAdjacentTiles(tile, param) {\r\n        let adjacentTiles = [];\r\n        let upTile;\r\n        let rightTile;\r\n        let downTile;\r\n        let leftTile;\r\n        if (!(tile.y - 1 < 0)) {\r\n            upTile = this.tileTab[tile.x].find((el) => el.y == (tile.y - 1));\r\n            if (param == \"includeEnd\") {\r\n                if (upTile.proximity == -2) {\r\n                    adjacentTiles.push(upTile);\r\n                }\r\n                else if (upTile.ballInside == false) {\r\n                    adjacentTiles.push(upTile);\r\n                }\r\n            }\r\n            else {\r\n                if (upTile.ballInside == false) {\r\n                    adjacentTiles.push(upTile);\r\n                }\r\n            }\r\n        }\r\n        if (!(tile.x + 1 == this.size)) {\r\n            rightTile = this.tileTab[tile.x + 1].find((el) => el.y == tile.y);\r\n            if (param == \"includeEnd\") {\r\n                if (rightTile.proximity == -2) {\r\n                    adjacentTiles.push(rightTile);\r\n                }\r\n                else if (rightTile.ballInside == false) {\r\n                    adjacentTiles.push(rightTile);\r\n                }\r\n            }\r\n            else {\r\n                if (rightTile.ballInside == false) {\r\n                    adjacentTiles.push(rightTile);\r\n                }\r\n            }\r\n        }\r\n        if (!(tile.y + 1 == this.size)) {\r\n            downTile = this.tileTab[tile.x].find((el) => el.y == (tile.y + 1));\r\n            if (param == \"includeEnd\") {\r\n                if (downTile.proximity == -2) {\r\n                    adjacentTiles.push(downTile);\r\n                }\r\n                else if (downTile.ballInside == false) {\r\n                    adjacentTiles.push(downTile);\r\n                }\r\n            }\r\n            else {\r\n                if (downTile.ballInside == false) {\r\n                    adjacentTiles.push(downTile);\r\n                }\r\n            }\r\n        }\r\n        if (!(tile.x - 1 < 0)) {\r\n            leftTile = this.tileTab[tile.x - 1].find((el) => el.y == tile.y);\r\n            if (param == \"includeEnd\") {\r\n                if (leftTile.proximity == -2) {\r\n                    adjacentTiles.push(leftTile);\r\n                }\r\n                else if (leftTile.ballInside == false) {\r\n                    adjacentTiles.push(leftTile);\r\n                }\r\n            }\r\n            else {\r\n                if (leftTile.ballInside == false) {\r\n                    adjacentTiles.push(leftTile);\r\n                }\r\n            }\r\n        }\r\n        return adjacentTiles;\r\n    }\r\n    setProximity(x1, y1) {\r\n        function setProximityRecursiveFunc(tilesToCheck) {\r\n            let unsearchedAdjacent = [];\r\n            let adjacentTiles = [];\r\n            if (tilesToCheck.length != 0) {\r\n                tilesToCheck.forEach(el => {\r\n                    adjacentTiles = this.getAdjacentTiles(el);\r\n                    adjacentTiles.forEach(ele => {\r\n                        if (!(searchedTiles.includes(ele))) {\r\n                            searchedTiles.push(ele);\r\n                            unsearchedAdjacent.push(ele);\r\n                        }\r\n                    });\r\n                });\r\n                proximity++;\r\n                unsearchedAdjacent.forEach(el => {\r\n                    el.setProximity(proximity);\r\n                });\r\n                setProximityRecursive(unsearchedAdjacent);\r\n            }\r\n        }\r\n        let setProximityRecursive = setProximityRecursiveFunc.bind(this);\r\n        let searchedTiles = [];\r\n        let startTile;\r\n        let endTile;\r\n        let proximity = 0;\r\n        startTile = this.tileTab[x1].find((el) => el.y == y1);\r\n        this.savedStartTile = startTile;\r\n        searchedTiles.push(startTile);\r\n        setProximityRecursive(searchedTiles);\r\n        startTile.setProximity(-2);\r\n    }\r\n    getPath(adjacentToEnd, startTile, endTile) {\r\n        function getPathRecursiveFunc(prevTile) {\r\n            let adjacentToPrev = this.getAdjacentTiles(prevTile, \"includeEnd\");\r\n            let lowestProximity = adjacentToPrev[0];\r\n            adjacentToPrev.forEach(el => {\r\n                if (el.proximity < lowestProximity.proximity) {\r\n                    lowestProximity = el;\r\n                }\r\n            });\r\n            path.push(lowestProximity);\r\n            if (lowestProximity.proximity == -2) {\r\n            }\r\n            else {\r\n                getPathRecursive(lowestProximity);\r\n            }\r\n        }\r\n        let path = [];\r\n        let getPathRecursive = getPathRecursiveFunc.bind(this);\r\n        let lowestProximity = adjacentToEnd[0];\r\n        if (lowestProximity == undefined || lowestProximity.proximity == -1) {\r\n        }\r\n        else {\r\n            if (!endTile.ballInside) {\r\n                path.push(endTile);\r\n            }\r\n            adjacentToEnd.forEach(el => {\r\n                if (el.proximity < lowestProximity.proximity) {\r\n                    lowestProximity = el;\r\n                }\r\n            });\r\n            path.push(lowestProximity);\r\n            if (lowestProximity.proximity == -2) { }\r\n            else {\r\n                getPathRecursive(lowestProximity);\r\n            }\r\n            this.savedPath = path;\r\n            this.highlightPath(path);\r\n        }\r\n    }\r\n    resetProximity() {\r\n        this.tileTab.forEach(el => {\r\n            el.forEach(ele => {\r\n                ele.setProximity(-1);\r\n            });\r\n        });\r\n    }\r\n    resetHighlight() {\r\n        this.savedPath.forEach(el => {\r\n            el.highlightOff();\r\n        });\r\n    }\r\n    highlightPath(path) {\r\n        path.forEach(el => {\r\n            el.highlightOn();\r\n        });\r\n    }\r\n    moveBall(path, ball, x, y) {\r\n        this.tileTab[ball.x].find(el => el.y == ball.y).ballInside = false;\r\n        this.tileTab[x].find(el => el.y == y).ballInside = true;\r\n        let pathReversed = path.reverse();\r\n        var i = 0;\r\n        function animationLoop() {\r\n            setTimeout(function () {\r\n                ball.ball.style.top = 50 * pathReversed[i].y + \"px\";\r\n                ball.ball.style.left = 50 * pathReversed[i].x + \"px\";\r\n                i++;\r\n                if (i < pathReversed.length) {\r\n                    animationLoop();\r\n                }\r\n            }, 30);\r\n        }\r\n        animationLoop();\r\n        this.ballTab[ball.x][ball.y] = null;\r\n        ball.x = x;\r\n        ball.y = y;\r\n        this.ballTab[x][y] = ball;\r\n        let ballsToDelete = this.checkPlace(x, y, ball);\r\n        if (ballsToDelete.length > 0) {\r\n            ballsToDelete.forEach(el => {\r\n                if (el.x == null) {\r\n                }\r\n                else {\r\n                    this.tileTab[el.x][el.y].ballInside = false;\r\n                    this.ballTab[el.x][el.y] = null;\r\n                }\r\n                el.destroy();\r\n                this.score++;\r\n            });\r\n            this.updateScore();\r\n        }\r\n        else {\r\n            this.nextTurn();\r\n        }\r\n    }\r\n    updateScore() {\r\n        document.getElementById(\"scoreDisplay\").innerHTML = this.score.toString();\r\n    }\r\n    nextTurn() {\r\n        this.generateBalls(this.nextColors);\r\n        this.nextColors = this.getColors(3);\r\n        this.displayNextColors();\r\n    }\r\n    checkPlace(x, y, ball) {\r\n        let verticalBalls = [];\r\n        let horizontalBalls = [];\r\n        let diagonalUpLeftBalls = [];\r\n        let diagonalDownLeftBalls = [];\r\n        //vertical\r\n        this.ballTab[x].forEach(el => {\r\n            if (el != null) {\r\n                verticalBalls.push(el);\r\n            }\r\n        });\r\n        //horizontal\r\n        for (let x = 0; x < this.size; x++) {\r\n            if (this.ballTab[x][y] != null) {\r\n                horizontalBalls.push(this.ballTab[x][y]);\r\n            }\r\n        }\r\n        //diagonalUpLeftBalls\r\n        let tempX = x;\r\n        let tempY = y;\r\n        while (tempX > 0 && tempY > 0) {\r\n            if (tempX > 0) {\r\n                tempX--;\r\n            }\r\n            if (tempY > 0) {\r\n                tempY--;\r\n            }\r\n        }\r\n        while (tempX < this.size && tempY < this.size) {\r\n            if (this.ballTab[tempX][tempY] != null) {\r\n                diagonalUpLeftBalls.push(this.ballTab[tempX][tempY]);\r\n            }\r\n            tempX++;\r\n            tempY++;\r\n        }\r\n        //diagonalDownLeftBalls\r\n        tempX = x;\r\n        tempY = y;\r\n        while (tempX > 0 && tempY < this.size) {\r\n            if (tempX > 0) {\r\n                tempX--;\r\n            }\r\n            if (tempY > 0) {\r\n                tempY++;\r\n            }\r\n        }\r\n        while (tempX < this.size && tempY > 0) {\r\n            if (this.ballTab[tempX][tempY] != null) {\r\n                diagonalDownLeftBalls.push(this.ballTab[tempX][tempY]);\r\n            }\r\n            tempX++;\r\n            tempY--;\r\n        }\r\n        let ballsNeededToScore = 5;\r\n        let allBallsToDelete = [];\r\n        let axisBallsToDelete = [];\r\n        let tempAdjacentBalls = [];\r\n        let tempBallIndex;\r\n        //Delete vertical\r\n        //Delete vertical\r\n        //Delete vertical\r\n        if (verticalBalls.length >= ballsNeededToScore) {\r\n            tempAdjacentBalls.push(ball);\r\n            tempBallIndex = verticalBalls.indexOf(ball);\r\n            while (tempBallIndex > 0) {\r\n                tempBallIndex--;\r\n                if (verticalBalls[tempBallIndex] != undefined) {\r\n                    if (verticalBalls[tempBallIndex].y + 1 == verticalBalls[tempBallIndex + 1].y) {\r\n                        tempAdjacentBalls.unshift(verticalBalls[tempBallIndex]);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            tempBallIndex = verticalBalls.indexOf(ball);\r\n            while (tempBallIndex < verticalBalls.length) {\r\n                tempBallIndex++;\r\n                if (verticalBalls[tempBallIndex] != undefined) {\r\n                    if (verticalBalls[tempBallIndex].y - 1 == verticalBalls[tempBallIndex - 1].y) {\r\n                        tempAdjacentBalls.push(verticalBalls[tempBallIndex]);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            if (tempAdjacentBalls.length >= ballsNeededToScore) {\r\n                axisBallsToDelete.push(ball);\r\n                tempBallIndex = tempAdjacentBalls.indexOf(ball);\r\n                while (tempBallIndex > 0) {\r\n                    tempBallIndex--;\r\n                    if (tempAdjacentBalls[tempBallIndex] != undefined) {\r\n                        if (tempAdjacentBalls[tempBallIndex].color == ball.color) {\r\n                            axisBallsToDelete.unshift(tempAdjacentBalls[tempBallIndex]);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                tempBallIndex = tempAdjacentBalls.indexOf(ball);\r\n                while (tempBallIndex < tempAdjacentBalls.length) {\r\n                    tempBallIndex++;\r\n                    if (tempAdjacentBalls[tempBallIndex] != undefined) {\r\n                        if (tempAdjacentBalls[tempBallIndex].color == ball.color) {\r\n                            axisBallsToDelete.push(tempAdjacentBalls[tempBallIndex]);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (axisBallsToDelete.length >= 5) {\r\n                axisBallsToDelete.forEach(el => {\r\n                    allBallsToDelete.push(el);\r\n                });\r\n            }\r\n            else {\r\n            }\r\n            axisBallsToDelete = [];\r\n            tempAdjacentBalls = [];\r\n        }\r\n        //Delete horizontalBalls\r\n        //Delete horizontalBalls\r\n        //Delete horizontalBalls\r\n        if (horizontalBalls.length >= ballsNeededToScore) {\r\n            tempAdjacentBalls.push(ball);\r\n            tempBallIndex = horizontalBalls.indexOf(ball);\r\n            while (tempBallIndex > 0) {\r\n                tempBallIndex--;\r\n                if (horizontalBalls[tempBallIndex] != undefined) {\r\n                    if (horizontalBalls[tempBallIndex].x + 1 == horizontalBalls[tempBallIndex + 1].x) {\r\n                        tempAdjacentBalls.unshift(horizontalBalls[tempBallIndex]);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            tempBallIndex = horizontalBalls.indexOf(ball);\r\n            while (tempBallIndex < horizontalBalls.length) {\r\n                tempBallIndex++;\r\n                if (horizontalBalls[tempBallIndex] != undefined) {\r\n                    if (horizontalBalls[tempBallIndex].x - 1 == horizontalBalls[tempBallIndex - 1].x) {\r\n                        tempAdjacentBalls.push(horizontalBalls[tempBallIndex]);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            if (tempAdjacentBalls.length >= ballsNeededToScore) {\r\n                axisBallsToDelete.push(ball);\r\n                tempBallIndex = tempAdjacentBalls.indexOf(ball);\r\n                while (tempBallIndex > 0) {\r\n                    tempBallIndex--;\r\n                    if (tempAdjacentBalls[tempBallIndex] != undefined) {\r\n                        if (tempAdjacentBalls[tempBallIndex].color == ball.color) {\r\n                            axisBallsToDelete.unshift(tempAdjacentBalls[tempBallIndex]);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                tempBallIndex = tempAdjacentBalls.indexOf(ball);\r\n                while (tempBallIndex < tempAdjacentBalls.length) {\r\n                    tempBallIndex++;\r\n                    if (tempAdjacentBalls[tempBallIndex] != undefined) {\r\n                        if (tempAdjacentBalls[tempBallIndex].color == ball.color) {\r\n                            axisBallsToDelete.push(tempAdjacentBalls[tempBallIndex]);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (axisBallsToDelete.length >= 5) {\r\n                axisBallsToDelete.forEach(el => {\r\n                    allBallsToDelete.push(el);\r\n                });\r\n            }\r\n            else {\r\n            }\r\n            axisBallsToDelete = [];\r\n            tempAdjacentBalls = [];\r\n        }\r\n        //Delete diagonalUpLeftBalls\r\n        //Delete diagonalUpLeftBalls\r\n        //Delete diagonalUpLeftBalls\r\n        if (diagonalUpLeftBalls.length >= ballsNeededToScore) {\r\n            tempAdjacentBalls.push(ball);\r\n            tempBallIndex = diagonalUpLeftBalls.indexOf(ball);\r\n            while (tempBallIndex > 0) {\r\n                tempBallIndex--;\r\n                if (diagonalUpLeftBalls[tempBallIndex] != undefined) {\r\n                    if (diagonalUpLeftBalls[tempBallIndex].x + 1 == diagonalUpLeftBalls[tempBallIndex + 1].x && diagonalUpLeftBalls[tempBallIndex].y + 1 == diagonalUpLeftBalls[tempBallIndex + 1].y) {\r\n                        tempAdjacentBalls.unshift(diagonalUpLeftBalls[tempBallIndex]);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            tempBallIndex = diagonalUpLeftBalls.indexOf(ball);\r\n            while (tempBallIndex < diagonalUpLeftBalls.length) {\r\n                tempBallIndex++;\r\n                if (diagonalUpLeftBalls[tempBallIndex] != undefined) {\r\n                    if (diagonalUpLeftBalls[tempBallIndex].x - 1 == diagonalUpLeftBalls[tempBallIndex - 1].x && diagonalUpLeftBalls[tempBallIndex].y - 1 == diagonalUpLeftBalls[tempBallIndex - 1].y) {\r\n                        tempAdjacentBalls.push(diagonalUpLeftBalls[tempBallIndex]);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            if (tempAdjacentBalls.length >= ballsNeededToScore) {\r\n                axisBallsToDelete.push(ball);\r\n                tempBallIndex = tempAdjacentBalls.indexOf(ball);\r\n                while (tempBallIndex > 0) {\r\n                    tempBallIndex--;\r\n                    if (tempAdjacentBalls[tempBallIndex] != undefined) {\r\n                        if (tempAdjacentBalls[tempBallIndex].color == ball.color) {\r\n                            axisBallsToDelete.unshift(tempAdjacentBalls[tempBallIndex]);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                tempBallIndex = tempAdjacentBalls.indexOf(ball);\r\n                while (tempBallIndex < tempAdjacentBalls.length) {\r\n                    tempBallIndex++;\r\n                    if (tempAdjacentBalls[tempBallIndex] != undefined) {\r\n                        if (tempAdjacentBalls[tempBallIndex].color == ball.color) {\r\n                            axisBallsToDelete.push(tempAdjacentBalls[tempBallIndex]);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (axisBallsToDelete.length >= 5) {\r\n                axisBallsToDelete.forEach(el => {\r\n                    allBallsToDelete.push(el);\r\n                });\r\n            }\r\n            else {\r\n            }\r\n            axisBallsToDelete = [];\r\n            tempAdjacentBalls = [];\r\n        }\r\n        //Delete diagonalDownLeftBalls\r\n        //Delete diagonalDownLeftBalls\r\n        //Delete diagonalDownLeftBalls\r\n        if (diagonalDownLeftBalls.length >= ballsNeededToScore) {\r\n            tempAdjacentBalls.push(ball);\r\n            tempBallIndex = diagonalDownLeftBalls.indexOf(ball);\r\n            while (tempBallIndex > 0) {\r\n                tempBallIndex--;\r\n                if (diagonalDownLeftBalls[tempBallIndex] != undefined) {\r\n                    if (diagonalDownLeftBalls[tempBallIndex].x + 1 == diagonalDownLeftBalls[tempBallIndex + 1].x && diagonalDownLeftBalls[tempBallIndex].y - 1 == diagonalDownLeftBalls[tempBallIndex + 1].y) {\r\n                        tempAdjacentBalls.unshift(diagonalDownLeftBalls[tempBallIndex]);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            tempBallIndex = diagonalDownLeftBalls.indexOf(ball);\r\n            while (tempBallIndex < diagonalDownLeftBalls.length) {\r\n                tempBallIndex++;\r\n                if (diagonalDownLeftBalls[tempBallIndex] != undefined) {\r\n                    if (diagonalDownLeftBalls[tempBallIndex].x - 1 == diagonalDownLeftBalls[tempBallIndex - 1].x && diagonalDownLeftBalls[tempBallIndex].y + 1 == diagonalDownLeftBalls[tempBallIndex - 1].y) {\r\n                        tempAdjacentBalls.push(diagonalDownLeftBalls[tempBallIndex]);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            if (tempAdjacentBalls.length >= ballsNeededToScore) {\r\n                axisBallsToDelete.push(ball);\r\n                tempBallIndex = tempAdjacentBalls.indexOf(ball);\r\n                while (tempBallIndex > 0) {\r\n                    tempBallIndex--;\r\n                    if (tempAdjacentBalls[tempBallIndex] != undefined) {\r\n                        if (tempAdjacentBalls[tempBallIndex].color == ball.color) {\r\n                            axisBallsToDelete.unshift(tempAdjacentBalls[tempBallIndex]);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                tempBallIndex = tempAdjacentBalls.indexOf(ball);\r\n                while (tempBallIndex < tempAdjacentBalls.length) {\r\n                    tempBallIndex++;\r\n                    if (tempAdjacentBalls[tempBallIndex] != undefined) {\r\n                        if (tempAdjacentBalls[tempBallIndex].color == ball.color) {\r\n                            axisBallsToDelete.push(tempAdjacentBalls[tempBallIndex]);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (axisBallsToDelete.length >= 5) {\r\n                axisBallsToDelete.forEach(el => {\r\n                    allBallsToDelete.push(el);\r\n                });\r\n            }\r\n            else {\r\n            }\r\n            axisBallsToDelete = [];\r\n            tempAdjacentBalls = [];\r\n        }\r\n        return allBallsToDelete;\r\n    }\r\n}\r\nGameGrid.colorsDisplay = document.getElementById(\"colorsDisplay\");\r\n__decorate([\r\n    _decorators__WEBPACK_IMPORTED_MODULE_2__[\"logNext\"]\r\n], GameGrid.prototype, \"nextTurn\", null);\r\n/* harmony default export */ __webpack_exports__[\"default\"] = ({ GameGrid });\r\n\n\n//# sourceURL=webpack:///./GameGrid.ts?");

/***/ }),

/***/ "./Script.ts":
/*!*******************!*\
  !*** ./Script.ts ***!
  \*******************/
/*! exports provided: Grid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Grid\", function() { return Grid; });\n/* harmony import */ var _GameGrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameGrid */ \"./GameGrid.ts\");\n\r\nlet Grid;\r\nfunction logBall(grid) {\r\n    console.log(grid.ballSelected);\r\n}\r\n/* change game parameters here */\r\nlet dimension = 9;\r\n/* change game parameters here */\r\nfunction init() {\r\n    Grid = new _GameGrid__WEBPACK_IMPORTED_MODULE_0__[\"GameGrid\"](dimension, document.getElementById(\"gameMap\"));\r\n    document.getElementById(\"gameMap\").style.transform = \"translateX(-\" + 25 * dimension + \"px)\";\r\n    window.oncontextmenu = function () {\r\n        logBall(Grid);\r\n        Grid.ifBallSelected = false;\r\n        Grid.ballSelected = null;\r\n        Grid.resetProximity();\r\n        document.getElementById(\"ifBallSelected\").innerHTML = \"No ball selected currently, click on to select\";\r\n        Grid.resetHighlight();\r\n        Grid.savedPath = [];\r\n        return false; // cancel default menus\r\n    };\r\n    Grid.createGrid();\r\n    Grid.generateBalls(Grid.getColors(3));\r\n    Grid.nextColors = Grid.getColors(3);\r\n    Grid.displayNextColors();\r\n}\r\n;\r\ndocument.addEventListener('DOMContentLoaded', init, false);\r\n\n\n//# sourceURL=webpack:///./Script.ts?");

/***/ }),

/***/ "./Tile.ts":
/*!*****************!*\
  !*** ./Tile.ts ***!
  \*****************/
/*! exports provided: Tile, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tile\", function() { return Tile; });\n/* harmony import */ var _Script__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Script */ \"./Script.ts\");\n\r\nclass Tile {\r\n    constructor(x, y, gameMap) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.gameMap = gameMap;\r\n        this.ballInside = false;\r\n        this.proximity = -1;\r\n    }\r\n    createTile() {\r\n        this.tile = document.createElement(\"div\");\r\n        this.tile.style.position = \"absolute\";\r\n        this.tile.style.top = 50 * this.y + \"px\";\r\n        this.tile.style.left = 50 * this.x + \"px\";\r\n        this.tile.style.width = \"48px\";\r\n        this.tile.style.height = \"48px\";\r\n        this.tile.style.border = \"1px solid black\";\r\n        this.gameMap.appendChild(this.tile);\r\n        this.tile.addEventListener(\"click\", () => {\r\n            if (_Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ifBallSelected) {\r\n                if (this.x == _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ballSelected.x && this.y == _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ballSelected.y) {\r\n                }\r\n                else {\r\n                    if (_Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ifBallSelected && this.proximity != -1) {\r\n                        document.getElementById(\"ifBallSelected\").innerHTML = \"No ball selected currently, click on to select\";\r\n                        _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].moveBall(_Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].savedPath, _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ballSelected, this.x, this.y);\r\n                        _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ifBallSelected = false;\r\n                        _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ballSelected = null;\r\n                        _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].resetProximity();\r\n                        _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].resetHighlight();\r\n                        _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].savedPath = [];\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.tile.addEventListener(\"mouseover\", () => {\r\n            if (_Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ifBallSelected && this.proximity != -1) {\r\n                _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].getPath(_Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].getAdjacentTiles(this, \"includeEnd\"), _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].savedStartTile, this);\r\n            }\r\n        });\r\n        this.tile.addEventListener(\"mouseout\", () => {\r\n            if (_Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].ifBallSelected && this.proximity != -1) {\r\n                _Script__WEBPACK_IMPORTED_MODULE_0__[\"Grid\"].resetHighlight();\r\n            }\r\n        });\r\n    }\r\n    toggleBall() {\r\n        this.ballInside = !this.ballInside;\r\n    }\r\n    setProximity(proximity) {\r\n        this.proximity = proximity;\r\n    }\r\n    toggleHighlight() {\r\n        if (this.tile.style.backgroundColor == \"red\") {\r\n            this.tile.style.backgroundColor = \"white\";\r\n        }\r\n        else {\r\n            this.tile.style.backgroundColor = \"red\";\r\n        }\r\n    }\r\n    highlightOn() {\r\n        this.tile.style.backgroundColor = \"red\";\r\n    }\r\n    highlightOff() {\r\n        this.tile.style.backgroundColor = \"white\";\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tile);\r\n\n\n//# sourceURL=webpack:///./Tile.ts?");

/***/ }),

/***/ "./decorators.ts":
/*!***********************!*\
  !*** ./decorators.ts ***!
  \***********************/
/*! exports provided: logNext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"logNext\", function() { return logNext; });\nfunction logNext(target, name, descriptor) {\r\n    var originalMethod = descriptor.value;\r\n    descriptor.value = function (...args) {\r\n        var result = originalMethod.apply(this, args);\r\n        return result;\r\n    };\r\n}\r\n// export function logPathLength(target: any, name: string, descriptor: any) {\r\n//     // //(target);x\r\n//     // //(descriptor);\r\n//     var originalMethod = descriptor.value;\r\n//     descriptor.value = function (...args: any[]) {\r\n//         var result = originalMethod.apply(this, args);\r\n//         // //();\r\n//         document.getElementById(\"pathLength\").innerHTML = \"Długość podświetlonego to : \" + args[0].length.toString() + \"\";\r\n//         return result;\r\n//     }\r\n// }\r\n\n\n//# sourceURL=webpack:///./decorators.ts?");

/***/ })

/******/ });